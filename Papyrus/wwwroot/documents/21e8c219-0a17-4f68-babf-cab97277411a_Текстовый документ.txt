```jsx
import React, { useState, useRef, useEffect } from 'react';

function App() {
  const [documents, setDocuments] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  // Mock data for demonstration
  useEffect(() => {
    setDocuments([
      {
        id: 1,
        name: 'annual_report.pdf',
        type: 'pdf',
        size: '2.4 MB',
        uploadedAt: new Date(Date.now() - 86400000).toISOString()
      },
      {
        id: 2,
        name: 'budget_planning.xlsx',
        type: 'excel',
        size: '1.8 MB',
        uploadedAt: new Date(Date.now() - 172800000).toISOString()
      },
      {
        id: 3,
        name: 'project_proposal.docx',
        type: 'word',
        size: '3.2 MB',
        uploadedAt: new Date(Date.now() - 43200000).toISOString()
      }
    ]);
  }, []);

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    handleFiles(e.dataTransfer.files);
  };

  const handleFileInput = (e) => {
    handleFiles(e.target.files);
  };

  const handleFiles = (files) => {
    if (files.length === 0) return;

    const validTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
    const newDocuments = [];

    Array.from(files).forEach((file, index) => {
      if (!validTypes.includes(file.type)) {
        setError(`Недопустимый тип файла: ${file.name}`);
        setTimeout(() => setError(''), 3000);
        return;
      }

      if (file.size > 10 * 1024 * 1024) { // 10 MB
        setError(`Файл слишком большой: ${file.name}`);
        setTimeout(() => setError(''), 3000);
        return;
      }

      // Simulate upload progress
      let progress = 0;
      const interval = setInterval(() => {
        progress += 10;
        setUploadProgress(progress);
        if (progress >= 100) {
          clearInterval(interval);
          setUploadProgress(0);
          
          newDocuments.push({
            id: Date.now() + index,
            name: file.name,
            type: file.type.split('/')[1].toLowerCase(),
            size: formatBytes(file.size),
            uploadedAt: new Date().toISOString()
          });

          setDocuments(prev => [...prev, ...newDocuments]);
        }
      }, 100);
    });
  };

  const formatBytes = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const getFileIcon = (type) => {
    switch (type) {
      case 'pdf':
        return (
          <svg className="w-12 h-12 text-red-500" viewBox="0 0 24 24" fill="currentColor">
            <path d="M14,2L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2H14M18,20V9H13V4H6V20H18M11.5,11C10.67,11 10,11.67 10,12.5V13H13V12.5C13,11.67 12.33,11 11.5,11M13,15.5H10V15H13V15.5M15,13.5V17H8V13.5H15Z" />
          </svg>
        );
      case 'word':
        return (
          <svg className="w-12 h-12 text-blue-500" viewBox="0 0 24 24" fill="currentColor">
            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,19H6.5V16H13.5V19M13.5,14H6.5V11H13.5V14M13.5,9H6.5V6H13.5V9M17.5,19H15.5V6H17.5V19Z" />
          </svg>
        );
      case 'excel':
        return (
          <svg className="w-12 h-12 text-green-500" viewBox="0 0 24 24" fill="currentColor">
            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H14A2,2 0 0,0 16,20V4A2,2 0 0,0 14,2M13,9H17.5L14,13M14,19H6V16H14M14,14H6V11H14" />
          </svg>
        );
      default:
        return (
          <svg className="w-12 h-12 text-gray-400" viewBox="0 0 24 24" fill="currentColor">
            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,19H6.5V16H13.5V19M13.5,14H6.5V11H13.5V14M13.5,9H6.5V6H13.5V9M17.5,19H15.5V6H17.5V19Z" />
          </svg>
        );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <svg className="w-8 h-8 text-indigo-600" viewBox="0 0 24 24" fill="currentColor">
                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,19H6.5V16H13.5V19M13.5,14H6.5V11H13.5V14M13.5,9H6.5V6H13.5V9M17.5,19H15.5V6H17.5V19Z" />
              </svg>
              <h1 className="ml-2 text-xl font-bold text-gray-900">DocStorage</h1>
            </div>
            <nav className="hidden md:flex space-x-4">
              <a href="#" className="text-gray-600 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium">Главная</a>
              <a href="#" className="text-gray-600 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium">Документы</a>
              <a href="#" className="text-gray-600 hover:text-indigo-600 px-3 py-2 rounded-md text-sm font-medium">О нас</a>
            </nav>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Upload Area */}
        <section className="mb-12">
          <div 
            className={`border-2 border-dashed rounded-lg p-8 text-center ${
              isDragging ? 'border-indigo-500 bg-indigo-50' : 'border-gray-300 hover:border-gray-400'
            } transition-colors duration-300`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <input 
              type="file" 
              ref={fileInputRef}
              className="hidden" 
              multiple 
              accept=".pdf,.doc,.docx,.xls,.xlsx"
              onChange={handleFileInput}
            />
            
            <div className="space-y-4">
              <svg className="mx-auto w-12 h-12 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                <path d="M12 10v6m0 0l-3-3m3 3l3-3m2 2H7" strokeLinecap="round" strokeLinejoin="round" />
                <path d="M3 17V7a2 2 0 012-2h14a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
              
              <div>
                <h2 className="text-lg font-medium text-gray-900">Загрузите документы</h2>
                <p className="mt-1 text-sm text-gray-500">
                  Перетащите сюда файлы или <button 
                    onClick={() => fileInputRef.current.click()} 
                    className="text-indigo-600 hover:text-indigo-500 font-medium"
                  >
                    выберите файлы
                  </button>
                </p>
              </div>
              
              <div className="text-xs text-gray-500 max-w-md mx-auto">
                Поддерживаются PDF, Word и Excel (до 10 МБ каждый)
              </div>
              
              {uploadProgress > 0 && (
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-indigo-600 h-2 rounded-full transition-all duration-300 ease-out"
                    style={{ width: `${uploadProgress}%` }}
                  ></div>
                </div>
              )}
            </div>
          </div>
        </section>

        {/* Error Message */}
        {error && (
          <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4 rounded-md">
            <div className="flex">
              <svg className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
              <p className="ml-3 text-sm text-red-700">{error}</p>
            </div>
          </div>
        )}

        {/* Document Grid */}
        <section>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Мои документы</h2>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-500">{documents.length} документов</span>
              <button className="p-2 text-gray-500 hover:text-indigo-600 focus:outline-none">
                <svg className="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414 9.707 9.121A1 1 0 008.293 9H5V7h5a1 1 0 011-1h2a1 1 0 011 1v2H4V3zm2 4h8a1 1 0 011-1h2v3a1 1 0 01-1 1h-2a1 1 0 00-1 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1v-6a1 1 0 011-1z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>

          {documents.length === 0 ? (
            <div className="bg-white rounded-lg shadow p-12 text-center">
              <svg className="mx-auto w-16 h-16 text-gray-300" viewBox="0 0 24 24" fill="currentColor">
                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,19H6.5V16H13.5V19M13.5,14H6.5V11H13.5V14M13.5,9H6.5V6H13.5V9M17.5,19H15.5V6H17.5V19Z" />
              </svg>
              <h3 className="mt-4 text-lg font-medium text-gray-900">Нет загруженных документов</h3>
              <p className="mt-2 text-sm text-gray-500">Загрузите первый документ, чтобы начать работу</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {documents.map((doc) => (
                <div 
                  key={doc.id} 
                  className="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-300"
                >
                  <div className="p-4 flex items-start">
                    <div className="flex-shrink-0">
                      {getFileIcon(doc.type)}
                    </div>
                    <div className="ml-4 flex-1">
                      <h3 className="text-sm font-medium text-gray-900 truncate">{doc.name}</h3>
                      <p className="mt-1 text-xs text-gray-500">{doc.size} • {formatDate(doc.uploadedAt)}</p>
                      <div className="mt-3 flex justify-between items-center">
                        <a 
                          href="#" 
                          onClick={(e) => e.preventDefault()}
                          className="text-xs text-indigo-600 hover:text-indigo-500"
                        >
                          Просмотреть
                        </a>
                        <a 
                          href="#" 
                          onClick={(e) => e.preventDefault()}
                          className="text-xs text-gray-500 hover:text-gray-700 flex items-center"
                        >
                          <svg className="w-4 h-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                            <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
                          </svg>
                          Скачать
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </section>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex flex-col md:flex-row md:justify-between md:items-center">
            <div className="flex items-center">
              <svg className="w-6 h-6 text-indigo-600" viewBox="0 0 24 24" fill="currentColor">
                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13.5,19H6.5V16H13.5V19M13.5,14H6.5V11H13.5V14M13.5,9H6.5V6H13.5V9M17.5,19H15.5V6H17.5V19Z" />
              </svg>
              <span className="ml-2 text-sm text-gray-600">© 2023 DocStorage. Все права защищены.</span>
            </div>
            <div className="mt-4 md:mt-0">
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600">Политика конфиденциальности</a>
              <span className="mx-2 text-gray-400">•</span>
              <a href="#" className="text-sm text-gray-600 hover:text-indigo-600">Условия использования</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;
```